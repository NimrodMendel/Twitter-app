{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nimrodmendel/Projects_2020_2021/ITC_Full_Stack/React/react-project-2-NimrodMendel/src/Home.js\";\nimport React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport TweetForm from \"./Components/TweetForm/TweetForm\";\nimport TweetsList from \"./Components/TweetsList/TweetsList\";\nimport { getData, sendData } from \"./lib/TweetsAPI\";\nimport LoadSpinner from \"./Components/LoadSpinner/LoadSpinner\";\nimport { appContext } from \"./appContext\";\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      showSpinner: false,\n      handleOnAddTweet: newTweet => this.handleOnAddTweet(newTweet)\n    };\n  }\n  /**\n   * A function that handles tweet sending.\n   * The function makes use of the TweetsAPI for posting the tweets.\n   * @param {Object} newTweet\n   */\n\n\n  handleOnAddTweet(newTweet) {\n    this.setState({\n      showSpinner: true\n    });\n    sendData(newTweet, () => {\n      this.setState(state => {\n        return {\n          tweets: [newTweet, ...state.tweets]\n        };\n      });\n    });\n    this.setState({\n      showSpinner: false\n    });\n  }\n\n  async componentDidMount() {\n    this.setState({\n      showSpinner: true\n    });\n    const tweetsFromServer = await this.fetchTweets();\n    console.log(tweetsFromServer.data.tweets);\n    this.setState({\n      tweets: tweetsFromServer.data.tweets\n    });\n    this.setState({\n      showSpinner: false\n    });\n  }\n\n  fetchTweets() {\n    const response = getData();\n    return response;\n  }\n\n  updateTweets(tweets) {\n    this.setState({\n      tweets: tweetsToCheck\n    });\n  }\n\n  componentDidUpdate() {\n    const tweetsToCheck = getData();\n    const prevTweets = this.state.tweets;\n\n    if (tweetsToCheck !== prevTweets) {}\n  }\n\n  render() {\n    const {\n      showSpinner\n    } = this.state;\n\n    if (showSpinner) {\n      return /*#__PURE__*/_jsxDEV(LoadSpinner, {\n        className: \"d-flex justify-content-center mt-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(appContext.Provider, {\n      value: this.state,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-inline w-75 justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          fluid: true,\n          className: \"mt-5\",\n          children: /*#__PURE__*/_jsxDEV(TweetForm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TweetsList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/nimrodmendel/Projects_2020_2021/ITC_Full_Stack/React/react-project-2-NimrodMendel/src/Home.js"],"names":["React","Container","TweetForm","TweetsList","getData","sendData","LoadSpinner","appContext","Home","Component","constructor","props","state","tweets","showSpinner","handleOnAddTweet","newTweet","setState","componentDidMount","tweetsFromServer","fetchTweets","console","log","data","response","updateTweets","tweetsToCheck","componentDidUpdate","prevTweets","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport TweetForm from \"./Components/TweetForm/TweetForm\";\nimport TweetsList from \"./Components/TweetsList/TweetsList\";\nimport { getData, sendData } from \"./lib/TweetsAPI\";\nimport LoadSpinner from \"./Components/LoadSpinner/LoadSpinner\";\nimport { appContext } from \"./appContext\";\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      showSpinner: false,\n      handleOnAddTweet: (newTweet) => this.handleOnAddTweet(newTweet),\n    };\n  }\n\n  /**\n   * A function that handles tweet sending.\n   * The function makes use of the TweetsAPI for posting the tweets.\n   * @param {Object} newTweet\n   */\n  handleOnAddTweet(newTweet) {\n    this.setState({ showSpinner: true });\n    sendData(newTweet, () => {\n      this.setState((state) => {\n        return { tweets: [newTweet, ...state.tweets] };\n      });\n    });\n    this.setState({ showSpinner: false });\n  }\n\n  async componentDidMount() {\n    this.setState({ showSpinner: true });\n    const tweetsFromServer = await this.fetchTweets();\n    console.log(tweetsFromServer.data.tweets);\n    this.setState({ tweets: tweetsFromServer.data.tweets });\n    this.setState({ showSpinner: false });\n  }\n\n  fetchTweets() {\n    const response = getData();\n    return response;\n  }\n\n  updateTweets(tweets) {\n    this.setState({ tweets: tweetsToCheck });\n  }\n\n  componentDidUpdate() {\n    const tweetsToCheck = getData();\n    const prevTweets = this.state.tweets;\n\n    if (tweetsToCheck !== prevTweets) {\n    }\n  }\n\n  render() {\n    const { showSpinner } = this.state;\n\n    if (showSpinner) {\n      return <LoadSpinner className=\"d-flex justify-content-center mt-5\" />;\n    }\n\n    return (\n      <appContext.Provider value={this.state}>\n        <div className=\"d-inline w-75 justify-content-center\">\n          <Container fluid className=\"mt-5\">\n            <TweetForm />\n          </Container>\n          <TweetsList />\n        </div>\n      </appContext.Provider>\n    );\n  }\n}\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}