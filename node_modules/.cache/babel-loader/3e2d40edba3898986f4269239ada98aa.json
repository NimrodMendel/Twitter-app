{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nimrodmendel/Projects_2020_2021/ITC_Full_Stack/React/react-project-2-NimrodMendel/src/Home.js\";\nimport React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport TweetForm from \"./Components/TweetForm/TweetForm\";\nimport TweetsList from \"./Components/TweetsList/TweetsList\";\nimport { getData, sendData } from \"./lib/TweetsAPI\";\nimport { appContext } from \"./appContext\";\nimport Loader from \"react-loader-spinner\";\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      showSpinner: false,\n      handleOnAddTweet: newTweet => this.handleOnAddTweet(newTweet)\n    };\n  }\n  /**\n   * A function that handles tweet sending.\n   * The function makes use of the TweetsAPI for posting the tweets.\n   * @param {Object} newTweet\n   */\n\n\n  handleOnAddTweet(newTweet) {\n    try {\n      this.setState({\n        showSpinner: true\n      });\n      sendData(newTweet, () => {\n        this.setState(state => {\n          return {\n            tweets: [newTweet, ...state.tweets]\n          };\n        });\n      });\n      this.setState({\n        showSpinner: false\n      });\n    } catch (error) {\n      window.alert(error);\n      this.setState({\n        tweets: []\n      });\n    }\n  }\n\n  componentDidMount() {\n    //  Check for updates every 20 seconds\n    this.setState({\n      showSpinner: true\n    });\n    setInterval(() => {\n      this.fetchTweets().then();\n    }, 20000);\n  }\n\n  async fetchTweets() {\n    const tweetsFromServer = await getData();\n    const tweets = tweetsFromServer.data.tweets;\n    this.setState({\n      tweets,\n      showSpinner: false\n    });\n  }\n\n  render() {\n    const {\n      showSpinner\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(appContext.Provider, {\n      value: this.state,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-inline w-75 justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          fluid: true,\n          className: \"mt-5\",\n          children: [/*#__PURE__*/_jsxDEV(TweetForm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), showSpinner && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex mt-5 justify-content-center\",\n            children: /*#__PURE__*/_jsxDEV(Loader, {\n              type: \"Circles\",\n              color: \"#FFFFFF\",\n              height: 50,\n              width: 50,\n              timeout: 4000\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TweetsList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/nimrodmendel/Projects_2020_2021/ITC_Full_Stack/React/react-project-2-NimrodMendel/src/Home.js"],"names":["React","Container","TweetForm","TweetsList","getData","sendData","appContext","Loader","Home","Component","constructor","props","state","tweets","showSpinner","handleOnAddTweet","newTweet","setState","error","window","alert","componentDidMount","setInterval","fetchTweets","then","tweetsFromServer","data","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport TweetForm from \"./Components/TweetForm/TweetForm\";\nimport TweetsList from \"./Components/TweetsList/TweetsList\";\nimport { getData, sendData } from \"./lib/TweetsAPI\";\nimport { appContext } from \"./appContext\";\nimport Loader from \"react-loader-spinner\";\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      showSpinner: false,\n      handleOnAddTweet: (newTweet) => this.handleOnAddTweet(newTweet),\n    };\n  }\n\n  /**\n   * A function that handles tweet sending.\n   * The function makes use of the TweetsAPI for posting the tweets.\n   * @param {Object} newTweet\n   */\n  handleOnAddTweet(newTweet) {\n    try {\n      this.setState({ showSpinner: true });\n      sendData(newTweet, () => {\n        this.setState((state) => {\n          return { tweets: [newTweet, ...state.tweets] };\n        });\n      });\n      this.setState({ showSpinner: false });\n    } catch (error) {\n      window.alert(error);\n      this.setState({ tweets: [] });\n    }\n  }\n\n  componentDidMount() {\n    //  Check for updates every 20 seconds\n    this.setState({ showSpinner: true });\n    setInterval(() => {\n      this.fetchTweets().then();\n    }, 20000);\n  }\n\n  async fetchTweets() {\n    const tweetsFromServer = await getData();\n    const tweets = tweetsFromServer.data.tweets;\n    this.setState({ tweets, showSpinner: false });\n  }\n\n  render() {\n    const { showSpinner } = this.state;\n\n    return (\n      <appContext.Provider value={this.state}>\n        <div className=\"d-inline w-75 justify-content-center\">\n          <Container fluid className=\"mt-5\">\n            <TweetForm />\n            {showSpinner && (\n              <div className=\"d-flex mt-5 justify-content-center\">\n                <Loader\n                  type=\"Circles\"\n                  color=\"#FFFFFF\"\n                  height={50}\n                  width={50}\n                  timeout={4000}\n                />\n              </div>\n            )}\n          </Container>\n          <TweetsList />\n        </div>\n      </appContext.Provider>\n    );\n  }\n}\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}